version: '3.8'

networks:
  devops-network:
    driver: bridge

volumes:
  jenkins_home:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  postgresql_data:
  prometheus_data:
  grafana_data:

services:
  # Jenkins service
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins-new
    privileged: true
    user: root
    ports:
      - "9091:8080"
      - "50000:50000"
    networks:
      - devops-network
    volumes:
      - jenkins_home:/var/jenkins_home
    restart: always

  # PostgreSQL for SonarQube
  postgresql:
    image: postgres:13
    container_name: postgresql
    networks:
      - devops-network
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    restart: always

  # SonarQube service
  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    depends_on:
      - postgresql
    ports:
      - "9000:9000"
    networks:
      - devops-network
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgresql:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    restart: always

  # Prometheus service
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    networks:
      - devops-network
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: always

  # Grafana service
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - devops-network
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: always

  # OWASP ZAP service
  owasp-zap:
    image: zaproxy/zap-stable
    container_name: owasp-zap
    command: 
      - /bin/sh
      - -c
      - |
        # Start ZAP in the background
        zap.sh -daemon -host 0.0.0.0 -port 8090 \
          -config api.addrs.addr.name=.* \
          -config api.addrs.addr.regex=true \
          -config api.key=apikey &
        
        # Wait for ZAP API to be ready
        while ! curl -s http://localhost:8090 >/dev/null; do sleep 2; done
        
        # Run your script
        chmod +x /zap/script.sh
        /zap/script.sh
    ports:
      - "8090:8090"
    volumes:
      - ./zap-reports:/zap/reports
      - ./owasp-zap/script.sh:/zap/script.sh
    environment:
      - ZAP_API_KEY=apikey
      - TARGET_URL=http://host.docker.internal:8080
    networks:
      - devops-network
    restart: always
    depends_on:
      petclinic:
        condition: service_healthy
  
  # Spring PetClinic Application
#  petclinic:
#    build:
#      context: .
#      dockerfile: petclinic/Dockerfile
#    container_name: petclinic
#    networks:
#      - devops-network
#    ports:
#      - "8080:8080"
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
#      interval: 10s
#      timeout: 5s
#      retries: 10
